// Generated by Dagger (https://dagger.dev).
package com.shakbari.core.di;

import com.shakbari.core.di.utils.RetrofitConfig;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RetrofitModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<RetrofitConfig> retrofitUtilsProvider;

  public RetrofitModule_ProvideRetrofitFactory(Provider<OkHttpClient> okHttpClientProvider,
      Provider<RetrofitConfig> retrofitUtilsProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
    this.retrofitUtilsProvider = retrofitUtilsProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofit(okHttpClientProvider.get(), retrofitUtilsProvider.get());
  }

  public static RetrofitModule_ProvideRetrofitFactory create(
      Provider<OkHttpClient> okHttpClientProvider, Provider<RetrofitConfig> retrofitUtilsProvider) {
    return new RetrofitModule_ProvideRetrofitFactory(okHttpClientProvider, retrofitUtilsProvider);
  }

  public static Retrofit provideRetrofit(OkHttpClient okHttpClient, RetrofitConfig retrofitUtils) {
    return Preconditions.checkNotNullFromProvides(RetrofitModule.INSTANCE.provideRetrofit(okHttpClient, retrofitUtils));
  }
}
